	
/*
 * Created on Jun 29,2012
 *
 */
package com.academy.som.printpickticket.screens;

import org.eclipse.swt.widgets.Composite;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.academy.som.util.AcademyPCAConstants;
import com.academy.som.util.logging.AcademySIMTraceUtil;
import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCBehavior;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCXmlUtils;

/**
 * Custom Behavior class done for managing the 
 * External Panel : "com.academy.sfs.printpickticket.screens.AcademyShipmentStatsDashboardPanel"
 *
 * @author <a href="mailto:KaushikN.Sanji@cognizant.com">Kaushik N Sanji</a>
 * Copyright © 2005, 2006 Sterling Commerce, Inc. All Rights Reserved.
 */
 
public class AcademyShipmentStatsDashboardPanelBehavior extends YRCBehavior {

	private static String CLASSNAME = "AcademyShipmentStatsDashboardPanelBehavior";
	
	private AcademyShipmentStatsDashboardPanel ownerForm; //External Panel composite object
	
	/**
	 * Constructor for the behavior class. 
	 * @param ownerComposite
	 * 			<br/> - Composite of External Panel
	 * @param formId
	 * 			<br/> - FORM ID of External Panel : "com.academy.sfs.printpickticket.screens.AcademyShipmentStatsDashboardPanel"
	 */
    public AcademyShipmentStatsDashboardPanelBehavior(Composite ownerComposite, String formId) {
        super(ownerComposite, formId);
        final String methodName="AcademyShipmentStatsDashboardPanelBehavior(ownerComposite, formId)";
		AcademySIMTraceUtil.startMessage(CLASSNAME, methodName);
		
		ownerForm = (AcademyShipmentStatsDashboardPanel) ownerComposite;
        init();
        
        callCommonCodeForStoreStats();
        AcademySIMTraceUtil.endMessage(CLASSNAME, methodName);
    }
    
	/**
	 * This method initializes the behavior class.
	 */    
	public void init() {
		
	}
	
	/**
	 * Method to call the custom view service to fetch
	 * the Store's Operation statistics 
	 * (Like No of Short Picked, Pack completed)
	 *
	 */
	private void callStoreOpStatsListService() {
		final String methodName="callStoreOpStatsListService()";
		AcademySIMTraceUtil.startMessage(CLASSNAME, methodName);
		
		YRCApiContext context = new YRCApiContext();
		context.setFormId(getFormId());
		context.setApiName(AcademyPCAConstants.GET_STORE_OP_STATS_LIST_COMMAND);
		context.setInputXml(prepareInputForStoreOpStatsServ());
		callApi(context);
		
		AcademySIMTraceUtil.endMessage(CLASSNAME, methodName);
	}

	/**
	 * Method to prepare the Input document for the Custom
	 * view service to fetch the Store Operation Stats
	 * @return Document
	 * 			<br/> - Input for fetching Store Operation Stats
	 * 			<pre>
	 * 			{@code 
	 * 				<SFSStoreStats ShipNode="<<ShipNode of logged in User>>" />
	 * 			}
	 * 			</pre>
	 */
	private Document prepareInputForStoreOpStatsServ() {
		final String methodName="prepareInputForStoreOpStatsServ()";
		AcademySIMTraceUtil.startMessage(CLASSNAME, methodName);
		
		Document storeOpStatsInputDoc = YRCXmlUtils.createDocument(AcademyPCAConstants.STORE_OP_STATS_ELEMENT);
		Element rootElement = storeOpStatsInputDoc.getDocumentElement();
		rootElement.setAttribute(AcademyPCAConstants.SHIPNODE_ATTR,
				YRCPlatformUI.getUserElement().getAttribute(AcademyPCAConstants.SHIPNODE_ATTR));
		
		AcademySIMTraceUtil.endMessage(CLASSNAME, methodName);
		return storeOpStatsInputDoc;
	}

	/**
	 * Method to call the getCommonCodeList API to 
	 * fetch the description for the Stats generated by custom view service
	 *
	 */
	private void callCommonCodeForStoreStats() {
		final String methodName="callCommonCodeForStoreStats()";
		AcademySIMTraceUtil.startMessage(CLASSNAME, methodName);
		
		YRCApiContext context = new YRCApiContext();
		context.setFormId(getFormId());
		context.setApiName(AcademyPCAConstants.GET_SHIP_STORE_STATS_COMMAND);
		context.setInputXml(prepareInputForStoreStatsCC());
		callApi(context);
		
		AcademySIMTraceUtil.endMessage(CLASSNAME, methodName);
	}

	/**
	 * Method to prepare the Input document for getCommonCodeList API call
	 * to fetch the Store Stats description
	 * @return Document
	 * 			<br/> - Input for fetching the Store Stats description
	 * 			<pre>
	 * 			{@code
	 * 				<CommonCode CodeType="STORE_STATS" />
	 * 			}
	 * 			</pre>
	 */
	private Document prepareInputForStoreStatsCC() {
		final String methodName="prepareInputForStoreStatsCC()";
		AcademySIMTraceUtil.startMessage(CLASSNAME, methodName);
		
		Document commonCodeInputDoc = YRCXmlUtils.createDocument(AcademyPCAConstants.COMMON_CODE_ELEMENT);
		Element rootElement = commonCodeInputDoc.getDocumentElement();
		rootElement.setAttribute(AcademyPCAConstants.CODE_TYPE_ATTR, AcademyPCAConstants.CODE_TYPE_VAL_FOR_STORE_STATS);
		
		AcademySIMTraceUtil.endMessage(CLASSNAME, methodName);
		return commonCodeInputDoc;
	}

	/**
	 * Superclass method to set the screen models for the custom API Calls
	 * and to handle failure of API calls
	 * @param context
	 * 			<br/> - the context in which the API is called
	 */
	public void handleApiCompletion(YRCApiContext context) {
		final String methodName="handleApiCompletion(context)";
		AcademySIMTraceUtil.startMessage(CLASSNAME, methodName);
		
		if(context.getInvokeAPIStatus()<0){
			//to handle API call failures
			AcademySIMTraceUtil.logMessage(context.getApiName()+" call Failed");
			AcademySIMTraceUtil.logMessage("Error Output: \n", context.getOutputXml().getDocumentElement());
		}else{
			//to handle successful API calls
			if(context.getApiName().equals(AcademyPCAConstants.GET_SHIP_STORE_STATS_COMMAND)){
				//to handle the command "GetStoreStatsCC"
				AcademySIMTraceUtil.logMessage(methodName+" :: "+context.getApiName());
				Document commonCodeDoc = context.getOutputXml();
				/**
				 * Output XML of command "GetStoreStatsCC"
				 * <pre>
				 * {@code
				 *		<CommonCodeList>
				 *			<CommonCode CodeLongDescription="<<Group name>>" CodeShortDescription="<<STAT_* description>>"
				 *						CodeType="STORE_STATS" CodeValue="STAT_*"/>
				 *			.
				 *			.
				 *			.
				 *		</CommonCodeList>
				 * }
				 * </pre>
				 */
				setModel(AcademyPCAConstants.SHIP_STORE_STATS_CC_MODEL, commonCodeDoc.getDocumentElement());
				callStoreOpStatsListService();
			}
			
			if(context.getApiName().equals(AcademyPCAConstants.GET_STORE_OP_STATS_LIST_COMMAND)){
				//to handle the command "GetStoreOpStatsList"
				AcademySIMTraceUtil.logMessage(methodName+" :: "+context.getApiName());
				Document storeOpStatsOutputDoc = context.getOutputXml();
				/**
				 * Output XML of command "GetStoreOpStatsList"
				 * <pre>
				 * {@code
				 *		<SFSStoreStatsList>
				 *			<SFSStoreStats Count="<<STAT value>>" Description="STAT_*"
				 *					 ShipNode="<<ShipNode of logged in User>>"/>
				 *			.
				 *			.
				 *			.
				 *		</SFSStoreStatsList>
				 * }
				 * </pre>
				 */
				setModel(AcademyPCAConstants.STORE_OP_STATS_MODEL, storeOpStatsOutputDoc.getDocumentElement());
				//calling to genarate the stats dynamically on completion of "GetStoreStatsCC" and "GetStoreOpStatsList" commands
				generateFieldValueStats(); 
			}
		}
		super.handleApiCompletion(context);
		AcademySIMTraceUtil.endMessage(CLASSNAME, methodName);
	}
	
	/**
	 * Method to generate the Store's Shipment statistics dashboard dynamically. 
	 *
	 */
	private void generateFieldValueStats() {
		final String methodName="generateFieldValueStats()";
		AcademySIMTraceUtil.startMessage(CLASSNAME, methodName);
		
		Element storeStatsCCElement = getModel(AcademyPCAConstants.SHIP_STORE_STATS_CC_MODEL);
		Element storeOpStatsElement = getModel(AcademyPCAConstants.STORE_OP_STATS_MODEL);
		
		//Calling the Composite's method to generate the stats dynamically 
		ownerForm.generateFieldValueStats(storeStatsCCElement, storeOpStatsElement);
		
		ownerForm.getParent().getParent().layout(true, true); //to relayout the screen after fields are generated
		AcademySIMTraceUtil.endMessage(CLASSNAME, methodName);
	}

}
