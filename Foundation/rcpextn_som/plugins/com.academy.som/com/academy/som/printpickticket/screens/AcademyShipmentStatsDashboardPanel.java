	
/*
 * Created on Jun 29,2012
 *
 */
package com.academy.som.printpickticket.screens;

import java.util.HashMap;

import javax.xml.xpath.XPathConstants;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.academy.som.util.AcademyPCAConstants;
import com.academy.som.util.logging.AcademySIMTraceUtil;
import com.yantra.yfc.rcp.IYRCComposite;
import com.yantra.yfc.rcp.IYRCPanelHolder;
import com.yantra.yfc.rcp.YRCConstants;
import com.yantra.yfc.rcp.YRCExtentionBehavior;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCXPathUtils;


/**
 * Custom External Panel designed to display the Store's Shipment Statistics as Dashboard,
 * shown in the pageID : "com.yantra.pca.sop.rcp.tasks.outboundexecution.pickup.printpickticket.wizardpages.SOPOutboundPrintPickTicket"
 * 
 * @author <a href="mailto:KaushikN.Sanji@cognizant.com">Kaushik N Sanji</a>
 * Copyright © 2005, 2006 Sterling Commerce, Inc. All Rights Reserved.
 */

public class AcademyShipmentStatsDashboardPanel extends Composite implements IYRCComposite {

	private Composite pnlRoot = null; //Root composite object
    public static final String FORM_ID = "com.academy.som.printpickticket.screens.AcademyShipmentStatsDashboardPanel";  //  @jve:decl-index=0:

    private AcademyShipmentStatsDashboardPanelBehavior myBehavior; //Current panel's behavior class 
	/**
	 * Constructor of the External Panel class
	 * @param parent
	 * 			<br/> - parent Composite
	 * @param style
	 * 			<br/> - style of Composite
	 * @param behavior
	 * 			<br/> - Extention Behavior class : "com.academy.sfs.printpickticket.screens.AcademyPrintPickTicketForItemExtnWizardBehavior"
	 */
	public AcademyShipmentStatsDashboardPanel(Composite parent, int style, YRCExtentionBehavior
			behavior) {
		super(parent, style);
		initialize();
		
        setBindingForComponents();
		myBehavior = new AcademyShipmentStatsDashboardPanelBehavior(this, FORM_ID);
	}
	
	/**
	 * To initialize the composite Root panel
	 *
	 */
	private void initialize() {
		createRootPanel();
		this.setLayout(new FillLayout());
		setSize(new org.eclipse.swt.graphics.Point(300,200));
	}
	
    private void setBindingForComponents() {
    	
    }
    
    /**
     * Getter method for FORM_ID
     * @return String
     * 			<br/> - returns the panel FORM_ID
     */
    public String getFormId() {
        return FORM_ID;
    }
    
    /**
     * Getter method to get the Root Panel
     * @return String
     * 			<br/> - returns the panel's root composite
     */
    public Composite getRootPanel() {
        return pnlRoot;
    }

    /**
	 * Method to create the composite's root panel
	 *
	 */
	private void createRootPanel() {
		GridLayout gridLayout1 = new GridLayout();
		gridLayout1.numColumns = 2;
		pnlRoot = new Composite(this, SWT.NONE);
		pnlRoot.setData(YRCConstants.YRC_CONTROL_NAME, "shipmentStatsPanel");
		pnlRoot.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Composite");
        pnlRoot.setLayout(gridLayout1);
	}
	
	public IYRCPanelHolder getPanelHolder() {
        // TODO Complete getPanelHolder
        return null;
    }
    
    public String getHelpId() {
		// TODO Complete getHelpId
		return null;
	}

    /**
     * Method to generate the Store's Shipment statistics dashboard dynamically. All
     * stats are categorized in Groups which are generated dynamically
     * @param storeStatsCCElement
     * 			<br/> - "GetStoreStatsCC" command output that fetches
     * 					 the description for the Stats generated by custom view service
     * @param storeOpStatsElement
     * 			<br/> - "GetStoreOpStatsList" command output that fetches the Store Operation Stats
     */
	public void generateFieldValueStats(Element storeStatsCCElement, Element storeOpStatsElement) {
		GridData gridDataLbl = new GridData(); //Grid Data for Label fields
		gridDataLbl.horizontalAlignment = GridData.FILL;
		gridDataLbl.grabExcessHorizontalSpace = true;
		gridDataLbl.verticalAlignment = GridData.CENTER;
		
		GridData gridDataTxt = new GridData(); //Grid Data for Text fields
		gridDataTxt.horizontalAlignment = GridData.FILL;
		gridDataTxt.grabExcessHorizontalSpace = true;
		gridDataTxt.verticalAlignment = GridData.CENTER;
		
		Label lblDescription = null; //Label object to show the description of a particular stats
		Text txtCount = null; //Text object to show the Label's corresponding value
		HashMap<String, Group> groupElementsMap = new HashMap<String, Group>(); //Map to store Group objects generated
		
		NodeList commonCodeNodeList = storeStatsCCElement.getElementsByTagName(AcademyPCAConstants.COMMON_CODE_ELEMENT);
		
		for(int listIndex = 0; listIndex<commonCodeNodeList.getLength(); listIndex++){
			Element commonCodeElement = (Element)commonCodeNodeList.item(listIndex);
			//fetching the CodeLongDescription attribute value from "GetStoreStatsCC" output for Group Name
			String codeLongDesc = commonCodeElement.getAttribute(AcademyPCAConstants.CODE_LONG_DESC_ATTR);
			
			if(!groupElementsMap.containsKey(codeLongDesc)){
				//adding and storing the generated Group if not present in the Map 
				groupElementsMap.put(codeLongDesc, createShipmentStatsGrp(codeLongDesc));
			}
			
			if(groupElementsMap.size()>0){
				//generating the Group's fields when Map size is greater than 0
				String codeShortDesc = commonCodeElement.getAttribute(AcademyPCAConstants.CODE_SHORT_DESC_ATTR); //fetching the Stat's Description
				String codeValue = commonCodeElement.getAttribute(AcademyPCAConstants.CODE_VALUE_ATTR); //fetching the Stat's code name
				String countValueXpath = AcademyPCAConstants.STORE_OP_STATS_ELEMENT_XPATH + "[@" + AcademyPCAConstants.STATS_DESC_ATTR + 
										 "='" + codeValue + "']/@" + AcademyPCAConstants.STATS_COUNT_ATTR; 
				//fetching the value for the Stat's code name from "GetStoreOpStatsList" output
				String countValue = (String) YRCXPathUtils.evaluate(storeOpStatsElement, countValueXpath, XPathConstants.STRING);
				if(countValue==null || (countValue!=null && countValue.trim().length()==0)){
					//if Stat is not present in the "GetStoreOpStatsList" output, set the count to zero for the Stat
					countValue = "0";
				}
				
				Group grp = groupElementsMap.get(codeLongDesc);
				
				lblDescription = new Label(grp, SWT.NONE);
				lblDescription.setText(codeShortDesc);
				//Setting the control Name dynamically
				lblDescription.setData(YRCConstants.YRC_CONTROL_NAME, 
												(new StringBuilder())
														.append("lbl")
														.append(codeShortDesc.replace(AcademyPCAConstants.STRING_WHITE_SPACE, 
																AcademyPCAConstants.EMPTY_STRING)).toString());
				//Setting the theme for Label		
				lblDescription.setFont(YRCPlatformUI.getFont("Label"));
				lblDescription.setBackground(YRCPlatformUI.getBackGroundColor("Label"));
				lblDescription.setForeground(YRCPlatformUI.getForeGroundColor("Label"));
				lblDescription.setLayoutData(gridDataLbl);
				
				txtCount = new Text(grp, SWT.READ_ONLY);
				txtCount.setText(countValue);
				//Setting the control Name dynamically
				txtCount.setData(YRCConstants.YRC_CONTROL_NAME, 
											(new StringBuilder())
													.append("txt")
													.append(codeShortDesc.replace(AcademyPCAConstants.STRING_WHITE_SPACE,
															AcademyPCAConstants.EMPTY_STRING)).toString());
				//Setting the theme for Text		
				txtCount.setFont(YRCPlatformUI.getFont("Text"));
				txtCount.setBackground(YRCPlatformUI.getBackGroundColor("Text"));
				txtCount.setForeground(YRCPlatformUI.getForeGroundColor("Text"));
				txtCount.setLayoutData(gridDataTxt);
				
				AcademySIMTraceUtil.logMessage("[" + listIndex + "]" + lblDescription.getData(YRCConstants.YRC_CONTROL_NAME) + " : "
											   + lblDescription.getText() + " :: " + txtCount.getData(YRCConstants.YRC_CONTROL_NAME)
											   + " : " + txtCount.getText() + " :: " + grp.getData(YRCConstants.YRC_CONTROL_NAME)
											   + " : " + grp.getText());
			}
		}
	}
	
	/**
	 * Method to generate the Groups dynamically
	 * to categorize the stats  
	 * @param grpTitle
	 * 			<br/> - Group Title name fetched from 
	 * 					CodeLongDescription attribute value from "GetStoreStatsCC" output
	 * @return Group
	 * 			<br/> - returns the Group Object generated
	 */
	private Group createShipmentStatsGrp(String grpTitle) {
		Group shipmentStatsGrp = null; //Group object to categorize the stats
		
		GridData gridData = new GridData(); //Grid Data for Group
		gridData.horizontalAlignment = GridData.FILL;
		gridData.grabExcessHorizontalSpace = true;
		gridData.grabExcessVerticalSpace = false;
		gridData.verticalAlignment = GridData.BEGINNING;
		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 2;
		shipmentStatsGrp = new Group(getRootPanel(), SWT.NONE);
		shipmentStatsGrp.setText(grpTitle);
		//Setting the control Name dynamically
		shipmentStatsGrp.setData(YRCConstants.YRC_CONTROL_NAME, (new StringBuilder())
																	.append("shipmentStats")
																	.append(grpTitle).append("Grp").toString());
		//Setting the theme for Group
		shipmentStatsGrp.setFont(YRCPlatformUI.getFont("Group"));
		shipmentStatsGrp.setBackground(YRCPlatformUI.getBackGroundColor("Group"));
		shipmentStatsGrp.setForeground(YRCPlatformUI.getForeGroundColor("Group"));
		shipmentStatsGrp.setLayoutData(gridData);
		shipmentStatsGrp.setLayout(gridLayout);
		
		return shipmentStatsGrp;
	}

}
